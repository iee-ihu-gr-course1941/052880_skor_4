[{"C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\index.js":"1","C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\App.js":"2","C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\reportWebVitals.js":"3","C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\GameBoard.js":"4","C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\Cell.js":"5","C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\helper\\language.js":"6"},{"size":521,"mtime":1605730907556,"results":"7","hashOfConfig":"8"},{"size":168,"mtime":1605631217685,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":10339,"mtime":1607893279544,"results":"11","hashOfConfig":"8"},{"size":945,"mtime":1605902894425,"results":"12","hashOfConfig":"8"},{"size":930,"mtime":1607893338675,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"17skbl7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\index.js",[],["28","29"],"C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\App.js",[],"C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\reportWebVitals.js",[],"C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\GameBoard.js",["30"],"import React, { Component } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport language from \"./helper/language\";\r\nimport EnglishFlag from \"./img/English.svg\";\r\nimport GreekFlag from \"./img/Greek.svg\";\r\nimport \"./GameBoard.css\";\r\n\r\nexport default class GameBoard extends Component {\r\n  //We set default props for table rows / columns in case we want to make array size customizable!\r\n  static defaultProps = { nRows: 6, nCols: 7 };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gameBoard: new Array(this.props.nRows)\r\n        .fill(0)\r\n        .map(() => new Array(this.props.nCols).fill(0)),\r\n      activePlayer: Math.ceil(Math.random() * 2),\r\n      orangeWins: 0,\r\n      blueWins: 0,\r\n      winner: false,\r\n      victoriousPlayer: null,\r\n      disabled: false,\r\n      winSet: [],\r\n      language: \"English\",\r\n    };\r\n    this.resetBoard = this.resetBoard.bind(this);\r\n    this.resetScore = this.resetScore.bind(this);\r\n    this.toggleLanguage = this.toggleLanguage.bind(this);\r\n  }\r\n\r\n  tableBoard() {\r\n    let row = [];\r\n    let boardContainer = [];\r\n    let board = this.state.gameBoard;\r\n    for (let i = 0; i < this.props.nRows; i++) {\r\n      if (!row[i]) row[i] = [];\r\n      if (!boardContainer[i]) boardContainer[i] = [];\r\n      for (var j = 0; j < this.props.nCols; j++) {\r\n        let cellNum = `${i}-${j}`;\r\n        row[i].push(\r\n          <Cell\r\n            key={cellNum}\r\n            cellNum={cellNum}\r\n            player={board[i][j]}\r\n            dropPiece={() => this.dropPiece(cellNum)}\r\n            disabled={board[i][j] === -1 ? true : false}\r\n            isWinner={\r\n              this.state.winSet.indexOf(`${i},${j}`) !== -1 ? true : false\r\n            }\r\n          />\r\n        );\r\n      }\r\n      boardContainer[i].push(<tr key={i}>{row[i]}</tr>);\r\n    }\r\n\r\n    return boardContainer;\r\n  }\r\n\r\n  dropPiece(cellNum) {\r\n    let active = this.state.activePlayer;\r\n    let { nRows } = this.props;\r\n    let board = this.state.gameBoard;\r\n    let [x, y] = cellNum.split(\"-\").map(Number);\r\n\r\n    for (let i = nRows - 1; i > -1; i--) {\r\n      if (board[i][y] === 0) {\r\n        board[i][y] = active;\r\n        x = i;\r\n        break;\r\n      }\r\n    }\r\n    // enimerwnoume to state kai allazoume ton energo paikti\r\n    this.setState({ gameBoard: board }, () => this.checkWinner(x, y, active));\r\n  }\r\n\r\n  changeTurn() {\r\n    return null;\r\n  }\r\n\r\n  checkWinner(x, y) {\r\n    this.checkRow(x, y);\r\n    this.checkCol(x, y);\r\n    this.checkDiag(x, y);\r\n    if (!this.state.winner)\r\n      this.setState((st) => ({ activePlayer: st.activePlayer === 2 ? 1 : 2 }));\r\n  }\r\n\r\n  checkRow(x, y) {\r\n    let { nCols } = this.props;\r\n    let board = this.state.gameBoard;\r\n    let active = this.state.activePlayer;\r\n    let count = 0;\r\n    let winS = [];\r\n\r\n    for (let i = nCols - 1; i > -1; i--) {\r\n      if (board[x][i] === active) {\r\n        count++;\r\n        winS.push(`${x},${i}`);\r\n        console.log(winS);\r\n      } else {\r\n        count = 0;\r\n        winS.splice(0, winS.length);\r\n      }\r\n      if (count === 4) {\r\n        this.setState({ winSet: winS });\r\n        this.setWinner();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  checkCol(x, y) {\r\n    let winS = [];\r\n    let { nRows } = this.props;\r\n    let board = this.state.gameBoard;\r\n    let active = this.state.activePlayer;\r\n    let count = 0;\r\n    for (let i = nRows - 1; i > -1; i--) {\r\n      if (board[i][y] === active) {\r\n        count++;\r\n        winS.push(`${i},${y}`);\r\n      } else {\r\n        count = 0;\r\n        winS.splice(0, winS.length);\r\n      }\r\n      if (count === 4) {\r\n        this.setState({ winSet: winS });\r\n        return this.setWinner();\r\n      }\r\n    }\r\n  }\r\n\r\n  checkDiag(x, y) {\r\n    let board = this.state.gameBoard;\r\n    let active = this.state.activePlayer;\r\n    let { nRows, nCols } = this.props;\r\n    let tempX = x;\r\n    let tempY = y;\r\n    let count = 0;\r\n    let winS = [];\r\n    while (tempX >= 0 && tempY >= 0 && tempX < nRows && tempY < nCols) {\r\n      if (board[tempX][tempY] === active) {\r\n        count++;\r\n        winS.push(`${tempX},${tempY}`);\r\n      } else {\r\n        count = 0;\r\n        winS.splice(0, winS.length);\r\n      }\r\n      if (count === 4) {\r\n        this.setState({ winSet: winS });\r\n        return this.setWinner();\r\n      }\r\n\r\n      tempX -= 1;\r\n      tempY += 1;\r\n    }\r\n    winS.splice(0, winS.length);\r\n    // Ksanakanoume ton metriti miden kai thetoume tis suntetagmenes sto keli pou itan prin vgoun ektos oriwn pinaka\r\n    count = 0;\r\n    tempX += 1;\r\n    tempY -= 1;\r\n    while (tempX >= 0 && tempY >= 0 && tempX < nRows && tempY < nCols) {\r\n      if (board[tempX][tempY] === active) {\r\n        count++;\r\n        winS.push(`${tempX},${tempY}`);\r\n      } else {\r\n        winS.splice(0, winS.length);\r\n        count = 0;\r\n      }\r\n      if (count === 4) {\r\n        this.setState({ winSet: winS });\r\n        return this.setWinner();\r\n      }\r\n\r\n      tempX += 1;\r\n      tempY -= 1;\r\n    }\r\n    winS.splice(0, winS.length);\r\n    //Ksanakanoume ton metriti miden kai thetoume tis suntetagmenes stis arxikes gia na elegksoume tin alli diagwnio\r\n    count = 0;\r\n    tempX = x;\r\n    tempY = y;\r\n    while (tempX >= 0 && tempY >= 0 && tempX < nRows && tempY < nCols) {\r\n      if (board[tempX][tempY] === active) {\r\n        count++;\r\n        winS.push(`${tempX},${tempY}`);\r\n      } else {\r\n        winS.splice(0, winS.length);\r\n        count = 0;\r\n      }\r\n      if (count === 4) {\r\n        this.setState({ winSet: winS });\r\n        return this.setWinner();\r\n      }\r\n\r\n      tempX -= 1;\r\n      tempY -= 1;\r\n    }\r\n    winS.splice(0, winS.length);\r\n    count = 0;\r\n    tempX += 1;\r\n    tempY += 1;\r\n    while (tempX >= 0 && tempY >= 0 && tempX < nRows && tempY < nCols) {\r\n      if (board[tempX][tempY] === active) {\r\n        count++;\r\n        winS.push(`${tempX},${tempY}`);\r\n        console.log(winS);\r\n        console.log(\"in diag\");\r\n      } else {\r\n        winS.splice(0, winS.length);\r\n        count = 0;\r\n      }\r\n      if (count === 4) {\r\n        this.setState({ winSet: winS });\r\n        return this.setWinner();\r\n      }\r\n      tempX += 1;\r\n      tempY += 1;\r\n    }\r\n    winS.splice(0, winS.length);\r\n  }\r\n\r\n  setWinner() {\r\n    // Efoson vrethike nikitis ston teleutaio guro pername times sto winner = true kai koitame pios itan o nikitis gia na auksisoume ton antistoixo metriti!\r\n    this.setState({ victoriousPlayer: this.state.activePlayer });\r\n    this.setState((st) =>\r\n      this.state.activePlayer === 1\r\n        ? { winner: true, orangeWins: st.orangeWins + 1 }\r\n        : { winner: true, blueWins: st.blueWins + 1 }\r\n    );\r\n    this.freezeGame();\r\n  }\r\n\r\n  freezeGame() {\r\n    let board = this.state.gameBoard;\r\n    for (let i = 0; i < this.props.nRows; i++) {\r\n      for (let j = 0; j < this.props.nCols; j++) {\r\n        if (board[i][j] === 0) {\r\n          board[i][j] = -1;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ gameBoard: board });\r\n  }\r\n\r\n  resetBoard() {\r\n    let board = this.state.gameBoard;\r\n    let newPlayer = Math.ceil(Math.random() * 2);\r\n    for (let i = 0; i < this.props.nRows; i++) {\r\n      for (let j = 0; j < this.props.nCols; j++) {\r\n        board[i][j] = 0;\r\n      }\r\n    }\r\n    this.setState({\r\n      gameBoard: board,\r\n      activePlayer: newPlayer,\r\n      winner: false,\r\n      victoriousPlayer: 0,\r\n      winSet: [],\r\n    });\r\n  }\r\n  resetScore() {\r\n    this.setState({ blueWins: 0, orangeWins: 0 });\r\n    this.resetBoard();\r\n  }\r\n\r\n  toggleLanguage() {\r\n    this.setState({\r\n      language: this.state.language === \"English\" ? \"Greek\" : \"English\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      flagBtn,\r\n      gameName,\r\n      activePlayer,\r\n      score,\r\n      orange,\r\n      blue,\r\n      newGameBtn,\r\n      resetScoreBtn,\r\n      orangeWins,\r\n      blueWins,\r\n    } = language;\r\n    let lang = this.state.language;\r\n    let vic = this.state.victoriousPlayer;\r\n    let gameOver = (\r\n      <div\r\n        className={`${\r\n          vic === 1 ? \"neon-orange Gameover\" : \"neon-blue Gameover\"\r\n        }`}\r\n        style={\r\n          this.state.winner\r\n            ? { visibility: \"visible\" }\r\n            : { visibility: \"hidden\" }\r\n        }\r\n      >\r\n        {\" \"}\r\n        {vic === 1 ? `${orangeWins[lang]} ` : `${blueWins[lang]} `}\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"The-game\">\r\n        <div className=\"lang\">\r\n          <span className=\"flag\">\r\n            <img\r\n              className=\"flagImg\"\r\n              src={lang === \"English\" ? EnglishFlag : GreekFlag}\r\n              onClick={this.toggleLanguage}\r\n            ></img>\r\n          </span>\r\n          <button onClick={this.toggleLanguage} className=\"btn language\">\r\n            {flagBtn[lang]}\r\n          </button>\r\n        </div>\r\n        <div className=\"Info\">\r\n          <span className=\"acvite\">{activePlayer[lang]}: </span>\r\n          <span\r\n            className={`${\r\n              this.state.activePlayer === 1 ? \"neon-orange \" : \"neon-blue \"\r\n            } Player`}\r\n          >\r\n            {\" \"}\r\n            {this.state.activePlayer === 1\r\n              ? `${orange[lang]} `\r\n              : `${blue[lang]} `}{\" \"}\r\n          </span>\r\n          <div>\r\n            <span className=\"Score\">{score[lang]}</span>\r\n            <div>\r\n              <span className=\"Score numbers \">\r\n                <span className=\"neon-orange-full Player\">\r\n                  {\" \"}\r\n                  {orange[lang]} {this.state.orangeWins}\r\n                </span>{\" \"}\r\n                :\r\n                <span className=\"neon-blue-full Player\">\r\n                  {\" \"}\r\n                  {this.state.blueWins} {blue[lang]}{\" \"}\r\n                </span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"Reset\">\r\n          <button className=\"btn\" onClick={this.resetBoard}>\r\n            {newGameBtn[lang]}\r\n          </button>\r\n          <button className=\"btn Score\" onClick={this.resetScore}>\r\n            {resetScoreBtn[lang]}\r\n          </button>\r\n        </div>\r\n        <div className=\"Board-title\">\r\n          <div className=\"neon-orange\">{gameName[lang]}</div>\r\n          <div className=\"neon-blue\">-4</div>\r\n        </div>\r\n\r\n        <div>\r\n          <table className=\"Board\">\r\n            <tbody>{this.tableBoard()}</tbody>\r\n          </table>\r\n        </div>\r\n        {gameOver}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\Cell.js",[],"C:\\Users\\Le Talus\\Desktop\\Atei\\CORONAAAAAAAAAA\\2020-21 xeim\\ADISE + ergasia\\Ergasia 2020 xeim\\skor_4\\src\\helper\\language.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":307,"column":13,"nodeType":"37","endLine":311,"endColumn":14},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]